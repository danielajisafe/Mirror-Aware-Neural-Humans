from extras.skeletons import Skeleton
from  extras.utils import axisang_to_rot6d
import torch

# SMPL pose parameters (mean Angles) of the target pose, of shape (1, 24, 3) 
target_theta = torch.FloatTensor(
       [[[-2.8758e+00,  1.4974e-01, -7.2420e-01],
         [ 1.0679e-01,  3.4005e-02, -1.8338e-02],
         [ 3.4250e-02, -2.0757e-01, -2.5034e-01],
         [-6.7388e-02, -7.8975e-03,  5.7862e-02],
         [ 2.0951e-01, -7.4359e-02, -7.6969e-02],
         [ 2.5696e-01,  1.0247e-02, -3.9528e-03],
         [ 5.4633e-02, -7.2169e-03,  7.7734e-04],
         [-1.0740e-01,  2.3331e-01,  1.4368e-02],
         [ 4.5616e-02, -2.4702e-01,  2.2564e-01],
         [-4.8097e-03,  3.6667e-02, -1.4755e-02],
         [-2.0755e-01,  1.0481e-01,  1.5016e-01],
         [-1.5761e-01,  7.2876e-02, -3.1352e-01],
         [ 1.9767e-01,  2.3320e-02, -3.8316e-02],
         [-1.4472e-01, -9.4376e-02, -7.2820e-02],
         [-1.4603e-01,  1.0897e-01,  1.7970e-02],
         [ 4.2199e-01,  1.7308e-01, -7.4310e-02],
         [-1.4668e-01, -5.5875e-01, -4.4900e-01],
         [-1.9335e-01,  4.4814e-01,  3.6590e-01],
         [ 5.9496e-02, -2.0042e+00,  7.8635e-01],
         [-1.5738e-01,  1.9260e+00, -6.9893e-01],
         [-1.0644e-01, -1.4212e-01,  4.7622e-01],
         [-1.5988e-01,  1.1914e-01, -3.5853e-01],
         [-5.8058e-02, -1.0646e-01, -2.5942e-01],
         [-7.5606e-02,  1.2840e-01,  2.5206e-01]]])

theta6D_gt = torch.FloatTensor([[[ 1.4837e+02, -7.5810e+01, -1.0558e-03,  1.4112e+02,  3.0555e-03,
          -1.6762e-03],
         [-1.1804e+01, -4.3164e+00, -5.4511e+00,  4.8046e+00, -2.4476e+00,
           7.7634e+00],
         [ 7.5096e+00, -6.0438e+00, -5.0276e+00,  1.0183e+00,  1.4880e+01,
           1.1613e+01],
         [ 9.4870e-01,  3.0120e-01, -3.1250e-01,  9.3910e-01, -4.6900e-02,
          -1.6560e-01],
         [ 9.3756e+00, -2.6171e-01,  2.5656e+00,  2.4026e+01, -1.0108e+01,
           1.2624e+00],
         [-1.7597e+01, -7.6760e+00,  7.3410e-01,  1.0699e+01,  7.0170e+00,
           7.4307e+00],
         [ 9.8330e-01, -1.5910e-01,  1.3740e-01,  9.6740e-01, -1.1900e-01,
          -1.9710e-01],
         [ 9.3756e+00, -2.6171e-01,  2.5656e+00,  2.4026e+01, -1.0108e+01,
           1.2624e+00], #spine
         [ 1.1624e+01,  3.7872e-01, -1.8057e+00,  1.5587e+01,  1.2801e+01,
          -3.1262e+00],
         [ 3.6415e+01,  6.8181e+00, -5.2287e+00,  2.1186e+01,  5.6940e+00,
           2.2804e+00],
         [ 9.8260e-01,  1.0760e-01, -3.5800e-02,  9.0980e-01, -1.8240e-01,
           4.0080e-01],
         [ 2.6569e+01, -9.6394e+00,  1.3449e+00,  1.2893e+01, -4.4187e+00,
           5.2505e-01],
         [ 1.6750e+01, -6.3078e+00, -1.6153e+00,  1.7372e+01,  3.1498e+00,
           2.5256e-01],
         [ 8.7910e-01, -4.4860e-01,  4.6340e-01,  8.8350e-01,  1.1130e-01,
          -1.3500e-01],
         [ 9.3756e+00, -2.6171e-01,  2.5656e+00,  2.4026e+01, -1.0108e+01,
           1.2624e+00],
         [ 9.3756e+00, -2.6171e-01,  2.5656e+00,  2.4026e+01, -1.0108e+01,
           1.2624e+00],
         [ 9.3756e+00, -2.6171e-01,  2.5656e+00,  2.4026e+01, -1.0108e+01,
           1.2624e+00], 

        # 9 more 

        [ 9.3756e+00, -2.6171e-01,  2.5656e+00,  2.4026e+01, -1.0108e+01,
           1.2624e+00],
         [ 9.3756e+00, -2.6171e-01,  2.5656e+00,  2.4026e+01, -1.0108e+01,
           1.2624e+00],
         [ 9.3756e+00, -2.6171e-01,  2.5656e+00,  2.4026e+01, -1.0108e+01,
           1.2624e+00],
         [ 9.3756e+00, -2.6171e-01,  2.5656e+00,  2.4026e+01, -1.0108e+01,
           1.2624e+00],
         [ 9.3756e+00, -2.6171e-01,  2.5656e+00,  2.4026e+01, -1.0108e+01,
           1.2624e+00],
         [ 9.3756e+00, -2.6171e-01,  2.5656e+00,  2.4026e+01, -1.0108e+01,
           1.2624e+00],
         [ 9.3756e+00, -2.6171e-01,  2.5656e+00,  2.4026e+01, -1.0108e+01,
           1.2624e+00],
         [ 9.3756e+00, -2.6171e-01,  2.5656e+00,  2.4026e+01, -1.0108e+01,
           1.2624e+00],
         [ 9.3756e+00, -2.6171e-01,  2.5656e+00,  2.4026e+01, -1.0108e+01,
           1.2624e+00],
                                 
          ]])


def theta_params(batch_size, use_rot6D=False, start_zero=False, num_joints=None):

    '''for 17 joints'''
    inds_k = [0,2,5,11,1,4,10,3,6,12,15,16,18,20,17,19,21]
    # 3D theta
    theta =  target_theta[:, inds_k].clone() # (1,16,3)

    # 6D theta
    if use_rot6D:
        theta = theta6D_gt.clone().repeat(batch_size,1,1)
        if start_zero:
          angles = torch.Tensor([[[0,0,0]]]) # degree
          theta = axisang_to_rot6d(angles).repeat(batch_size,num_joints,1) # e.g  [1,0,0,1,0,0]

    return theta
